#include <QTcpSocket>
#include "modbustcpconnection.h"

///
/// \brief ModbusTcpConnection::ModbusTcpConnection
/// \param socketDescriptor
/// \param backend
/// \param parent
///
ModbusTcpConnection::ModbusTcpConnection(qintptr socketDescriptor, QModbusTcpServer* backend, QObject* parent)
    : QObject{parent}
    ,_backend(backend)
{
    _socket = new QTcpSocket(this);
    connect(_socket, &QTcpSocket::readyRead, this, &ModbusTcpConnection::onReadyRead);
    connect(_socket, &QTcpSocket::disconnected, this, &ModbusTcpConnection::onDisconnected);
    connect(_socket, &QTcpSocket::bytesWritten, this, &ModbusTcpConnection::onBytesWritten);

    if (!_socket->setSocketDescriptor(socketDescriptor)) {
        qWarning() << "Failed to set socket descriptor";
        deleteLater();
        return;
    }

    qDebug() << "New Modbus TCP connection from" << _socket->peerAddress().toString();
}

///
/// \brief ModbusTcpConnection::onReadyRead
///
void ModbusTcpConnection::onReadyRead()
{
    if (_isProcessing) return;

    _buffer.append(_socket->readAll());

    while (_buffer.size() >= 6) // MBAP header size
    {
        quint16 transactionId = readUInt16(_buffer, 0);
        quint16 protocolId    = readUInt16(_buffer, 2);
        quint16 length        = readUInt16(_buffer, 4);

        if (protocolId != 0) {
            qWarning() << "Invalid Modbus protocol ID:" << protocolId;
            _socket->close();
            return;
        }

        if (_buffer.size() < 6 + length) {
            return;
        }

        if (length < 2) {
            qWarning() << "Invalid Modbus PDU length";
            _socket->close();
            return;
        }

        QByteArray message = _buffer.left(6 + length);
        _buffer.remove(0, 6 + length);

        processModbusMessage(message);
    }
}

///
/// \brief ModbusTcpConnection::processModbusMessage
/// \param rawMessage
///
void ModbusTcpConnection::processModbusMessage(const QByteArray& rawMessage)
{
    if (rawMessage.size() < 7) return;

    quint8 unitId = static_cast<quint8>(rawMessage[6]);

    // üîÅ –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –≤–º–µ—Å—Ç–æ matchingServerAddress!
    bool shouldProcess = true; // ‚úÖ –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é –ª–æ–≥–∏–∫—É

    // –ü—Ä–∏–º–µ—Ä—ã:
    // shouldProcess = (unitId != 0); // –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å broadcast
    // shouldProcess = (unitId == 1 || unitId == 2); // —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    // shouldProcess = true; // –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Å—ë

    qDebug() << "Modbus Unit ID:" << unitId << "‚Üí" << (shouldProcess ? "ACCEPT" : "REJECT");

    if (!shouldProcess) {
        // üö´ –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å exception response, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        return;
    }

    // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É QModbusTcpServer
    // –ù–æ: QModbusTcpServer –Ω–µ –∏–º–µ–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API –¥–ª—è "–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"

    // ‚ùó –ü—Ä–æ–±–ª–µ–º–∞: QModbusTcpServer –æ–∂–∏–¥–∞–µ—Ç, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–¥—ë—Ç —á–µ—Ä–µ–∑ –µ–≥–æ QTcpServer
    // ‚Üí –ù–∞–º –Ω—É–∂–Ω–æ "–ø–æ–¥—Å—É–Ω—É—Ç—å" –∑–∞–ø—Ä–æ—Å —Ç–∞–∫, –±—É–¥—Ç–æ –æ–Ω –ø—Ä–∏—à—ë–ª –ø–æ —Å–µ—Ç–∏

    // üí° –†–µ—à–µ–Ω–∏–µ: —Å–æ–∑–¥–∞—Ç—å "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ" ‚Äî –Ω–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–æ

    // ‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å QModbusServer::processRequest() ‚Äî –Ω–æ –æ–Ω protected!

    // üò° –ó–Ω–∞—á–∏—Ç, –Ω—É–∂–Ω–æ –ª–∏–±–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å QModbusTcpServer –∏ –æ—Ç–∫—Ä—ã—Ç—å processRequest,
    // –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å, –ª–∏–±–æ... —Ö–∞–∫ —Å d_ptr (–Ω–æ –º—ã –∂–µ —Ö–æ—Ç–∏–º –∏–∑–±–µ–∂–∞—Ç—å!)

    // ‚Üí –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤—ã—Ö–æ–¥: –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç ‚Äî –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ "–∫–∞–∫ –µ—Å—Ç—å"
    // –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –µ–≥–æ —Å–ª—É—à–∞—é—â–∏–π —Å–æ–∫–µ—Ç? –ù–µ—Ç, —ç—Ç–æ –∑–∞—Ü–∏–∫–ª–∏—Ç.

    // ü§î –õ—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞ QModbusTcpServer —Å –æ—Ç–∫—Ä—ã—Ç—ã–º processRequest

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –®–ê–ì–£ 3 üëá
}

///
/// \brief ModbusTcpConnection::onDisconnected
///
void ModbusTcpConnection::onDisconnected()
{
    qDebug() << "Client disconnected";
    deleteLater();
}

///
/// \brief ModbusTcpConnection::onBytesWritten
/// \param bytes
///
void ModbusTcpConnection::onBytesWritten(qint64 bytes)
{
    Q_UNUSED(bytes)
}

///
/// \brief ModbusTcpConnection::readUInt16
/// \param data
/// \param offset
/// \return
///
quint16 ModbusTcpConnection::readUInt16(const QByteArray& data, int offset) const
{
    if (offset + 1 >= data.size()) return 0;
    return static_cast<quint16>((static_cast<quint8>(data[offset]) << 8) |
                                static_cast<quint8>(data[offset + 1]));
}

///
/// \brief ModbusTcpConnection::writeUInt16
/// \param data
/// \param offset
/// \param value
///
void ModbusTcpConnection::writeUInt16(QByteArray& data, int offset, quint16 value) const
{
    if (offset + 1 >= data.size()) return;
    data[offset]     = static_cast<char>((value >> 8) & 0xFF);
    data[offset + 1] = static_cast<char>(value & 0xFF);
}
