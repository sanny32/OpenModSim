#include <QTimer>
#include <QSerialPort>
#include <QRandomGenerator>
#include "modbusrtuserialserver.h"

#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
#include <QtCore/qmath.h>
#include <QModbusRtuSerialSlave>
typedef QModbusRtuSerialSlave QModbusRtuSerialServer;
#else
#include <QModbusRtuSerialServer>
#endif

///
/// \brief The QModbusSerialAdu class
///
class QModbusSerialAdu
{
public:
    enum Type {
        Ascii,
        Rtu
    };

    inline QModbusSerialAdu(Type type, const QByteArray &data)
        : _type(type), _data(data), _rawData(data)
    {
        if (_type == Ascii)
            _data = QByteArray::fromHex(_data.mid(1, _data.size() - 3));
    }

    inline int size() const {
        if (_type == Ascii)
            return _data.size() - 1; // one byte, LRC
        return _data.size() - 2; // two bytes, CRC
    }
    inline QByteArray data() const { return _data.left(size()); }

    inline int rawSize() const { return _rawData.size(); }
    inline QByteArray rawData() const { return _rawData; }

    inline int serverAddress() const {
        Q_ASSERT_X(!_data.isEmpty(), "QModbusAdu::serverAddress()", "Empty ADU.");
        return quint8(_data.at(0));
    }

    inline QModbusPdu pdu() const {
        Q_ASSERT_X(!_data.isEmpty(), "QModbusAdu::pdu()", "Empty ADU.");
        return QModbusPdu(QModbusPdu::FunctionCode(_data.at(1)), _data.mid(2, size() - 2));
    }

    template <typename T>
    auto checksum() const -> decltype(T()) {
        Q_ASSERT_X(!_data.isEmpty(), "QModbusAdu::checksum()", "Empty ADU.");
        if (_type == Ascii)
            return quint8(_data[_data.size() - 1]);
        return quint16(quint8(_data[_data.size() - 2]) << 8 | quint8(_data[_data.size() - 1]));
    }

    inline bool matchingChecksum() const {
        Q_ASSERT_X(!_data.isEmpty(), "QModbusAdu::matchingChecksum()", "Empty ADU.");
        if (_type == Ascii)
            return QModbusSerialAdu::calculateLRC(data(), size()) == checksum<quint8>();
        return QModbusSerialAdu::calculateCRC(data(), size()) == checksum<quint16>();
    }

    /*!
        \internal
        \fn quint8 QModbusSerialAdu::calculateLRC(const char *data, qint32 len)

        Returns the LRC checksum of the first \a len bytes of \a data. The checksum is independent
        of the byte order (endianness).
    */
    inline static quint8 calculateLRC(const char *data, qint32 len)
    {
        quint32 lrc = 0;
        while (len--)
            lrc += *data++;
        return -(quint8(lrc));
    }

    /*!
        \internal
        \fn quint16 QModbusSerialAdu::calculateCRC(const char *data, qint32 len) const

        Returns the CRC checksum of the first \a len bytes of \a data.

        \note The code used by the function was generated with pycrc. There is no copyright assigned
        to the generated code, however, the author of the script requests to show the line stating
        that the code was generated by pycrc (see implementation).
    */
    inline static quint16 calculateCRC(const char *data, qint32 len)
    {
        // Generated by pycrc v0.8.3, https://pycrc.org
        // Width = 16, Poly = 0x8005, XorIn = 0xffff, ReflectIn = True,
        // XorOut = 0x0000, ReflectOut = True, Algorithm = bit-by-bit-fast

        quint16 crc = 0xFFFF;
        while (len--) {
            const quint8 c = *data++;
            for (qint32 i = 0x01; i & 0xFF; i <<= 1) {
                bool bit = crc & 0x8000;
                if (c & i)
                    bit = !bit;
                crc <<= 1;
                if (bit)
                    crc ^= 0x8005;
            }
            crc &= 0xFFFF;
        }
        crc = crc_reflect(crc & 0xFFFF, 16) ^ 0x0000;
        return (crc >> 8) | (crc << 8); // swap bytes
    }

    inline static QByteArray create(Type type, int serverAddress, const QModbusPdu &pdu,
                                    char delimiter = '\n') {
        QByteArray result;
        QDataStream out(&result, QIODevice::WriteOnly);
        out << quint8(serverAddress) << pdu;

        if (type == Ascii) {
            out << calculateLRC(result, result.size());
            return ":" + result.toHex() + "\r" + delimiter;
        } else {
            out << calculateCRC(result, result.size());
        }
        return result;
    }

    inline static QByteArray createWithIncorrectCrc(Type type, int serverAddress, const QModbusPdu &pdu,
                                                    char delimiter = '\n') {
        QByteArray result;
        QDataStream out(&result, QIODevice::WriteOnly);
        out << quint8(serverAddress) << pdu;

        if (type == Ascii) {
            quint8 lrc = calculateLRC(result, result.size());
            lrc ^= 0xFF; // spoil LRC
            out << lrc;
            return ":" + result.toHex() + "\r" + delimiter;
        } else {
            quint16 crc = calculateCRC(result, result.size());
            crc ^= 0xFFFF; // spoil CRC
            out << crc;
        }

        return result;
    }


private:
    inline static quint16 crc_reflect(quint16 data, qint32 len)
    {
        // Generated by pycrc v0.8.3, https://pycrc.org
        // Width = 16, Poly = 0x8005, XorIn = 0xffff, ReflectIn = True,
        // XorOut = 0x0000, ReflectOut = True, Algorithm = bit-by-bit-fast

        quint16 ret = data & 0x01;
        for (qint32 i = 1; i < len; i++) {
            data >>= 1;
            ret = (ret << 1) | (data & 0x01);
        }
        return ret;
    }

private:
    Type _type = Rtu;
    QByteArray _data;
    QByteArray _rawData;
};

///
/// \brief ModbusRtuSerialServer::ModbusRtuSerialServer
/// \param parent
///
ModbusRtuSerialServer::ModbusRtuSerialServer(QObject *parent)
    : ModbusServer(parent)
{
    _serialPort = new QSerialPort(this);
    QObject::connect(_serialPort, &QSerialPort::readyRead, this, &ModbusRtuSerialServer::on_readyRead);
    QObject::connect(_serialPort, &QSerialPort::errorOccurred, this, &ModbusRtuSerialServer::on_errorOccurred);
    QObject::connect(_serialPort, &QSerialPort::aboutToClose, this, &ModbusRtuSerialServer::on_aboutToClose);
}

///
/// \brief ModbusRtuSerialServer::~ModbusRtuSerialServer
///
ModbusRtuSerialServer::~ModbusRtuSerialServer()
{
    close();
}

///
/// \brief ModbusRtuSerialServer::on_readyRead
///
void ModbusRtuSerialServer::on_readyRead()
{
    ModbusDefinitions mbDef = getDefinitions();

    if (_interFrameTimer.isValid()
        && _interFrameTimer.elapsed() > _interFrameDelayMilliseconds
        && !_requestBuffer.isEmpty()) {
        // This permits response buffer clearing if it contains garbage
        // but still permits cases where very slow baud rates can cause
        // chunked and delayed packets
        qCDebug(QT_MODBUS_LOW) << "(RTU server) Dropping older ADU fragments due to larger than 3.5 char delay (expected:"
                               << _interFrameDelayMilliseconds << ", max:"
                               << _interFrameTimer.elapsed() << ")";
        _requestBuffer.clear();
    }

    _interFrameTimer.start();

    const qint64 size = _serialPort->size();
    _requestBuffer += _serialPort->read(size);

    const QModbusSerialAdu adu(QModbusSerialAdu::Rtu, _requestBuffer);
    qCDebug(QT_MODBUS_LOW) << "(RTU server) Received ADU:" << adu.rawData().toHex();

    // Index                         -> description
    // Server address                -> 1 byte
    // FunctionCode                  -> 1 byte
    // FunctionCode specific content -> 0-252 bytes
    // CRC                           -> 2 bytes
    QModbusCommEvent event = QModbusCommEvent::ReceiveEvent;
    if (value(QModbusServer::ListenOnlyMode, adu.serverAddress()).toBool())
        event |= QModbusCommEvent::ReceiveFlag::CurrentlyInListenOnlyMode;

    // We expect at least the server address, function code and CRC.
    if (adu.rawSize() < 4) { // TODO: LRC should be 3 bytes.
        qCWarning(QT_MODBUS) << "(RTU server) Incomplete ADU received, ignoring";

        // The quantity of CRC errors encountered by the remote device since its last
        // restart, clear counters operation, or power-up. In case of a message
        // length < 4 bytes, the receiving device is not able to calculate the CRC.
        incrementCounter(ModbusServer::Counter::BusCommunicationError, adu.serverAddress());
        storeModbusCommEvent(event | QModbusCommEvent::ReceiveFlag::CommunicationError);
        return;
    }

    // Server address is set to 0, this is a broadcast.
    _processesBroadcast = (adu.serverAddress() == 0);
    if (processesBroadcast())
        event |= QModbusCommEvent::ReceiveFlag::BroadcastReceived;

    const int pduSizeWithoutFcode = QModbusRequest::calculateDataSize(adu.pdu());

    // server address byte + function code byte + PDU size + 2 bytes CRC
    if ((pduSizeWithoutFcode < 0) || ((2 + pduSizeWithoutFcode + 2) != adu.rawSize())) {
        qCWarning(QT_MODBUS) << "(RTU server) ADU does not match expected size, ignoring";
        // The quantity of messages addressed to the remote device that it could not
        // handle due to a character overrun condition, since its last restart, clear
        // counters operation, or power-up. A character overrun is caused by data
        // characters arriving at the port faster than they can be stored, or by the loss
        // of a character due to a hardware malfunction.
        incrementCounter(ModbusServer::Counter::BusCharacterOverrun, adu.serverAddress());
        storeModbusCommEvent(event | QModbusCommEvent::ReceiveFlag::CharacterOverrun);
        return;
    }

    // We received the full message, including checksum. We do not expect more bytes to
    // arrive, so clear the buffer. All new bytes are considered part of the next message.
    _requestBuffer.resize(0);

    if (!adu.matchingChecksum()) {
        qCWarning(QT_MODBUS) << "(RTU server) Discarding request with wrong CRC, received:"
                             << adu.checksum<quint16>() << ", calculated CRC:"
                             << QModbusSerialAdu::calculateCRC(adu.data(), adu.size());
        // The quantity of CRC errors encountered by the remote device since its last
        // restart, clear counters operation, or power-up.
        incrementCounter(ModbusServer::Counter::BusCommunicationError, adu.serverAddress());
        storeModbusCommEvent(event | QModbusCommEvent::ReceiveFlag::CommunicationError);
        return;
    }

    // The quantity of messages that the remote device has detected on the communications
    // system since its last restart, clear counters operation, or power-up.
    incrementCounter(ModbusServer::Counter::BusMessage, adu.serverAddress());

    // If we do not process a Broadcast ...
    if (!processesBroadcast() && !matchingServerAddress(adu.serverAddress())) {
            return;
    } // else { Broadcast -> Server address will never match, deliberately ignore }

    storeModbusCommEvent(event); // store the final event before processing

    const QModbusRequest req = adu.pdu();

    qCDebug(QT_MODBUS) << "(RTU server) Request PDU:" << req;

    const auto msgReq = ModbusMessage::create(req, ModbusMessage::Rtu, adu.serverAddress(), QDateTime::currentDateTime(), true);
    emit modbusRequest(msgReq);

    if(mbDef.ErrorSimulations.noResponse())
        return;

    QModbusResponse response; // If the device ...
    if(mbDef.ErrorSimulations.responseIllegalFunction()) {
        incrementCounter(ModbusServer::Counter::ServerMessage, adu.serverAddress());
        response = QModbusExceptionResponse(req.functionCode(), QModbusExceptionResponse::IllegalFunction);
    }
    else if (mbDef.ErrorSimulations.responseDeviceBusy() || value(QModbusServer::DeviceBusy, adu.serverAddress()).value<quint16>() == 0xffff) {
        // is busy, update the quantity of messages addressed to the remote device for
        // which it returned a Server Device Busy exception response, since its last
        // restart, clear counters operation, or power-up.
        incrementCounter(ModbusServer::Counter::ServerBusy, adu.serverAddress());
        response = QModbusExceptionResponse(req.functionCode(),
                                            QModbusExceptionResponse::ServerDeviceBusy);
    } else {
        // is not busy, update the quantity of messages addressed to the remote device,
        // or broadcast, that the remote device has processed since its last restart,
        // clear counters operation, or power-up.
        incrementCounter(ModbusServer::Counter::ServerMessage, adu.serverAddress());
        response = forwardProcessRequest(req, adu.serverAddress());
    }

    const int serverAddressDelta = (mbDef.ErrorSimulations.responseIncorrectId() ? 1 : 0);

    qCDebug(QT_MODBUS) << "(RTU server) Response PDU:" << response;

    event = QModbusCommEvent::SentEvent; // reset event after processing
    if (value(QModbusServer::ListenOnlyMode, adu.serverAddress()).toBool())
        event |= QModbusCommEvent::SendFlag::CurrentlyInListenOnlyMode;

    if ((!response.isValid())
        || processesBroadcast()
        || value(QModbusServer::ListenOnlyMode, adu.serverAddress()).toBool()) {
        // The quantity of messages addressed to the remote device for which it has
        // returned no response (neither a normal response nor an exception response),
        // since its last restart, clear counters operation, or power-up.
        incrementCounter(ModbusServer::Counter::ServerNoResponse, adu.serverAddress());
        storeModbusCommEvent(event);
        return;
    }

    QByteArray result;
    if(mbDef.ErrorSimulations.responseIncorrectCrc()) {
        result = QModbusSerialAdu::createWithIncorrectCrc(QModbusSerialAdu::Rtu, adu.serverAddress() + serverAddressDelta, response);
    }
    else {
        result = QModbusSerialAdu::create(QModbusSerialAdu::Rtu, adu.serverAddress() + serverAddressDelta, response);
    }

    qCDebug(QT_MODBUS_LOW) << "(RTU server) Response ADU:" << result.toHex();

    if (!_serialPort->isOpen()) {
        qCDebug(QT_MODBUS) << "(RTU server) Requesting serial port has closed.";
        setError(QModbusRtuSerialServer::tr("Requesting serial port is closed"), QModbusDevice::WriteError);
        incrementCounter(ModbusServer::Counter::ServerNoResponse, adu.serverAddress());
        storeModbusCommEvent(event);
        return;
    }

    int responseDelay = 0;
    if(mbDef.ErrorSimulations.responseDelay()) {
        responseDelay = mbDef.ErrorSimulations.responseDelayTime();
    }
    else if(mbDef.ErrorSimulations.responseRandomDelay()) {
        responseDelay = QRandomGenerator::global()->bounded(mbDef.ErrorSimulations.responseRandomDelayUpToTime());
    }

    QTimer::singleShot(responseDelay, this,
                       [this, result, &event, req, response, adu, msgReq]()
    {
        qint64 writtenBytes = _serialPort->write(result);
        if ((writtenBytes == -1) || (writtenBytes < result.size())) {
            qCDebug(QT_MODBUS) << "(RTU server) Cannot write requested response to serial port.";
            setError(QModbusRtuSerialServer::tr("Could not write response to client"), QModbusDevice::WriteError);
            incrementCounter(ModbusServer::Counter::ServerNoResponse, adu.serverAddress());
            storeModbusCommEvent(event);
            _serialPort->clear(QSerialPort::Output);
            return;
        }

        const auto msgResp = ModbusMessage::create(result, ModbusMessage::Rtu, QDateTime::currentDateTime(), false);
        emit modbusResponse(msgReq, msgResp);

        if (response.isException()) {
            switch (response.exceptionCode()) {
            case QModbusExceptionResponse::IllegalFunction:
            case QModbusExceptionResponse::IllegalDataAddress:
            case QModbusExceptionResponse::IllegalDataValue:
                event |= QModbusCommEvent::SendFlag::ReadExceptionSent;
                break;

            case QModbusExceptionResponse::ServerDeviceFailure:
                event |= QModbusCommEvent::SendFlag::ServerAbortExceptionSent;
                break;

            case QModbusExceptionResponse::ServerDeviceBusy:
                // The quantity of messages addressed to the remote device for which it
                // returned a server device busy exception response, since its last restart,
                // clear counters operation, or power-up.
                incrementCounter(ModbusServer::Counter::ServerBusy, adu.serverAddress());
                event |= QModbusCommEvent::SendFlag::ServerBusyExceptionSent;
                break;

            case  QModbusExceptionResponse::NegativeAcknowledge:
                // The quantity of messages addressed to the remote device for which it
                // returned a negative acknowledge (NAK) exception response, since its last
                // restart, clear counters operation, or power-up.
                incrementCounter(ModbusServer::Counter::ServerNAK, adu.serverAddress());
                event |= QModbusCommEvent::SendFlag::ServerProgramNAKExceptionSent;
                break;

            default:
                break;
            }
            // The quantity of Modbus exception responses returned by the remote device since
            // its last restart, clear counters operation, or power-up.
            incrementCounter(ModbusServer::Counter::BusExceptionError, adu.serverAddress());
        } else {
            switch (quint16(req.functionCode())) {
            case 0x0a: // Poll 484 (not in the official Modbus specification) *1
            case 0x0e: // Poll Controller (not in the official Modbus specification) *1
            case QModbusRequest::GetCommEventCounter: // fall through and bail out
                break;
            default:
                // The device's event counter is incremented once for each successful message
                // completion. Do not increment for exception responses, poll commands, or fetch
                // event counter commands.            *1 but mentioned here ^^^
                incrementCounter(ModbusServer::Counter::CommEvent, adu.serverAddress());
                break;
            }
        }
        storeModbusCommEvent(event); // store the final event after processing
    });
}

///
/// \brief ModbusRtuSerialServer::on_aboutToClose
///
void ModbusRtuSerialServer::on_aboutToClose()
{
    if (state() != QModbusDevice::ClosingState)
        setState(QModbusDevice::UnconnectedState);
}

///
/// \brief ModbusRtuSerialServer::on_errorOccurred
///
void ModbusRtuSerialServer::on_errorOccurred(QSerialPort::SerialPortError error)
{
    if (error == QSerialPort::NoError)
        return;

    qCDebug(QT_MODBUS) << "(RTU server) QSerialPort error:" << error
                       << (_serialPort ? _serialPort->errorString() : QString());

    switch (error) {
    case QSerialPort::DeviceNotFoundError:
        setError(QModbusDevice::tr("Referenced serial device does not exist."), QModbusDevice::ConnectionError);
        break;
    case QSerialPort::PermissionError:
        setError(QModbusDevice::tr("Cannot open serial device due to permissions."), QModbusDevice::ConnectionError);
        break;
    case QSerialPort::OpenError:
    case QSerialPort::NotOpenError:
        setError(QModbusDevice::tr("Cannot open serial device."), QModbusDevice::ConnectionError);
        break;
    case QSerialPort::WriteError:
        setError(QModbusDevice::tr("Write error."), QModbusDevice::WriteError);
        break;
    case QSerialPort::ReadError:
        setError(QModbusDevice::tr("Read error."), QModbusDevice::ReadError);
        break;
    case QSerialPort::ResourceError:
        setError(QModbusDevice::tr("Resource error."), QModbusDevice::ConnectionError);
        break;
    case QSerialPort::UnsupportedOperationError:
        setError(QModbusDevice::tr("Device operation is not supported error."),
                    QModbusDevice::ConfigurationError);
        break;
    case QSerialPort::TimeoutError:
        setError(QModbusDevice::tr("Timeout error."), QModbusDevice::TimeoutError);
        break;
    case QSerialPort::UnknownError:
        setError(QModbusDevice::tr("Unknown error."), QModbusDevice::UnknownError);
        break;
    default:
        qCDebug(QT_MODBUS) << "(RTU server) Unhandled QSerialPort error" << error;
        break;
    }
}

///
/// \brief ModbusRtuSerialServer::processesBroadcast
/// \return
///
bool ModbusRtuSerialServer::processesBroadcast() const
{
    return _processesBroadcast;
}

///
/// \brief ModbusRtuSerialServer::interFrameDelay
/// \return
///
int ModbusRtuSerialServer::interFrameDelay() const
{
    return _interFrameDelayMilliseconds * 1000;
}

///
/// \brief ModbusRtuSerialServer::setInterFrameDelay
/// \param microseconds
///
void ModbusRtuSerialServer::setInterFrameDelay(int microseconds)
{
    _interFrameDelayMilliseconds = qCeil(qreal(microseconds) / 1000.);
    calculateInterFrameDelay();
}

///
/// \brief ModbusRtuSerialServer::connectionParameter
/// \param parameter
/// \return
///
QVariant ModbusRtuSerialServer::connectionParameter(QModbusDevice::ConnectionParameter parameter) const
{
    switch (parameter) {
    case QModbusDevice::SerialPortNameParameter:
        return _comPort;
    case QModbusDevice::SerialDataBitsParameter:
        return _dataBits;
    case QModbusDevice::SerialParityParameter:
        return _parity;
    case QModbusDevice::SerialStopBitsParameter:
        return _stopBits;
    case QModbusDevice::SerialBaudRateParameter:
        return _baudRate;
    default:
        return {};
    }
}

///
/// \brief ModbusRtuSerialServer::setConnectionParameter
/// \param parameter
/// \param value
///
void ModbusRtuSerialServer::setConnectionParameter(QModbusDevice::ConnectionParameter parameter, const QVariant &value)
{
    switch (parameter) {
    case QModbusDevice::SerialPortNameParameter:
        _comPort = value.toString();
        break;
    case QModbusDevice::SerialDataBitsParameter:
        _dataBits = QSerialPort::DataBits(value.toInt());
        break;
    case QModbusDevice::SerialParityParameter:
        _parity = QSerialPort::Parity(value.toInt());
        break;
    case QModbusDevice::SerialStopBitsParameter:
        _stopBits = QSerialPort::StopBits(value.toInt());
        break;
    case QModbusDevice::SerialBaudRateParameter:
        _baudRate = QSerialPort::BaudRate(value.toInt());
        break;
    default:
        Q_ASSERT_X(false, "", "Connection parameter not supported.");
        break;
    }
}

///
/// \brief ModbusRtuSerialServer::setupEnvironment
///
void ModbusRtuSerialServer::setupEnvironment()
{
    if (_serialPort) {
        _serialPort->setPortName(_comPort);
        _serialPort->setParity(_parity);
        _serialPort->setBaudRate(_baudRate);
        _serialPort->setDataBits(_dataBits);
        _serialPort->setStopBits(_stopBits);
    }

    calculateInterFrameDelay();

    _requestBuffer.clear();
}

///
/// \brief ModbusRtuSerialServer::calculateInterFrameDelay
///
void ModbusRtuSerialServer::calculateInterFrameDelay()
{
    // The spec recommends a timeout value of 1.750 msec. Without such
    // precise single-shot timers use a approximated value of 1.750 msec.
    int delayMilliSeconds = RecommendedDelay;
    if (_baudRate < 19200) {
        // Example: 9600 baud, 11 bit per packet -> 872 char/sec so:
        // 1000 ms / 872 char = 1.147 ms/char * 3.5 character = 4.0145 ms
        // Always round up because the spec requests at least 3.5 char.
        delayMilliSeconds = qCeil(3500. / (qreal(_baudRate) / 11.));
    }
    _interFrameDelayMilliseconds = qMax(_interFrameDelayMilliseconds, delayMilliSeconds);
}

///
/// \brief ModbusRtuSerialServer::open
/// \return
///
bool ModbusRtuSerialServer::open()
{
    if (state() == QModbusDevice::ConnectedState)
        return true;

    setupEnvironment(); // to be done before open
    if(_serialPort->open(QIODevice::ReadWrite)) {
        setState(QModbusDevice::ConnectedState);
        _serialPort->clear(); // only possible after open
    } else {
        setError(_serialPort->errorString(), QModbusDevice::ConnectionError);
    }
    return (state() == QModbusDevice::ConnectedState);
}

///
/// \brief ModbusRtuSerialServer::close
///
void ModbusRtuSerialServer::close()
{
    if (state() == QModbusDevice::UnconnectedState)
        return;

    if (_serialPort->isOpen())
        _serialPort->close();

    setState(QModbusDevice::UnconnectedState);
}

///
/// \brief ModbusRtuSerialServer::forwardProcessRequest
/// \param req
/// \return
///
QModbusResponse ModbusRtuSerialServer::forwardProcessRequest(const QModbusPdu &req, int serverAddress)
{
    QModbusResponse resp;
    if (req.functionCode() == QModbusRequest::EncapsulatedInterfaceTransport) {
        quint8 meiType;
        req.decodeData(&meiType);
        if (meiType == EncapsulatedInterfaceTransport::CanOpenGeneralReference) {
            resp = QModbusExceptionResponse(req.functionCode(), QModbusExceptionResponse::IllegalFunction);
        }
    }

    if(!resp.isValid())
        resp = ModbusServer::processRequest(req, serverAddress);

    return resp;
}
